/**
 * \file
 * \brief PKCS11 Library Configuration
 *
 * \copyright (c) 2017 Microchip Technology Inc. and its subsidiaries.
 *            You may use this software and any derivatives exclusively with
 *            Microchip products.
 *
 * \page License
 *
 * (c) 2017 Microchip Technology Inc. and its subsidiaries. You may use this
 * software and any derivatives exclusively with Microchip products.
 *
 * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
 * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
 * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
 * PARTICULAR PURPOSE, OR ITS INTERACTION WITH MICROCHIP PRODUCTS, COMBINATION
 * WITH ANY OTHER PRODUCTS, OR USE IN ANY APPLICATION.
 *
 * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
 * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
 * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
 * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
 * FULLEST EXTENT ALLOWED BY LAW, MICROCHIPS TOTAL LIABILITY ON ALL CLAIMS IN
 * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
 * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
 *
 * MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE OF THESE
 * TERMS.
 */

#ifndef PKCS11_CONFIG_H_
#define PKCS11_CONFIG_H_


/** Define to lock the PIN slot after writing */
#ifndef PKCS11_LOCK_PIN_SLOT
#cmakedefine01 PKCS11_LOCK_PIN_SLOT
#endif

/** Enable PKCS#11 Debugging Messages */
#ifndef PKCS11_DEBUG_ENABLE
#cmakedefine01 PKCS11_DEBUG_ENABLE
#endif

/** Enable PKCS#11 AUTH session terminate work around */
#ifndef PKCS11_AUTH_TERMINATE_BEFORE_LOGIN
#cmakedefine01 PKCS11_AUTH_TERMINATE_BEFORE_LOGIN
#endif

/** Use Static or Dynamic Allocation */
#ifndef PKCS11_USE_STATIC_MEMORY
#cmakedefine01 PKCS11_USE_STATIC_MEMORY
#endif

/** Use a compiled configuration rather than loading from a filestore */
#ifndef PKCS11_USE_STATIC_CONFIG
#cmakedefine01 PKCS11_USE_STATIC_CONFIG
#endif

/** Maximum number of slots allowed in the system - if static memory this will
   always be the number of slots */
#ifndef PKCS11_MAX_SLOTS_ALLOWED
#define PKCS11_MAX_SLOTS_ALLOWED        (@PKCS11_MAX_SLOTS_ALLOWED@U)
#endif

/** Maximum number of total sessions allowed in the system - if using static
   memory then this many session contexts will be allocated */
#ifndef PKCS11_MAX_SESSIONS_ALLOWED
#define PKCS11_MAX_SESSIONS_ALLOWED     (@PKCS11_MAX_SESSIONS_ALLOWED@U)
#endif

/** Maximum number of cryptographic objects allowed to be cached */
#ifndef PKCS11_MAX_OBJECTS_ALLOWED
#define PKCS11_MAX_OBJECTS_ALLOWED      (@PKCS11_MAX_OBJECTS_ALLOWED@U)
#endif

/** Maximum Config options - device, interface, label, freeslots, user_pin_handle, so_pin_handle, object */
#ifndef PKCS11_MAX_CONFIG_ALLOWED
#define PKCS11_MAX_CONFIG_ALLOWED       (@PKCS11_MAX_CONFIG_ALLOWED@U)
#endif

/** Maximum label size in characters */
#ifndef PKCS11_MAX_LABEL_SIZE
#define PKCS11_MAX_LABEL_SIZE           (@PKCS11_MAX_LABEL_SIZE@U)
#endif

/** Enables some additional test functionality for pkcs11 */
#ifndef PKCS11_TESTING_ENABLE
#cmakedefine PKCS11_TESTING_ENABLE
#endif

/** Define to always convert PIN using KDF */
#ifndef PKCS11_PIN_KDF_ALWAYS
#cmakedefine PKCS11_PIN_KDF_ALWAYS
#endif

/** Define to use PBKDF2 for PIN KDF */
#ifndef PKCS11_PIN_PBKDF2_EN
#cmakedefine PKCS11_PIN_PBKDF2_EN
#endif

/** Define how many iterations PBKDF2 will use for PIN KDF */
#if defined(PKCS11_PIN_PBKDF2_EN) && !defined(PKCS11_PIN_PBKDF2_ITERATIONS)
#define PKCS11_PIN_PBKDF2_ITERATIONS    @PKCS11_PIN_PBKDF2_ITERATIONS@
#endif    

/****************************************************************************/
/* The following configuration options are for fine tuning of the library   */
/****************************************************************************/

/** Defines if the library will produce a static function list or use an
   externally defined one. This is an optimization that allows for a statically
   linked library to include only the PKCS#11 functions that the application
   intends to use. Otherwise compilers will not be able to optimize out the unusued
   functions */
#ifndef PKCS11_EXTERNAL_FUNCTION_LIST
#cmakedefine01 PKCS11_EXTERNAL_FUNCTION_LIST
#endif

/** Static Search Attribute Cache in bytes (variable number of attributes based
   on size and memory requirements) */
#ifndef PKCS11_SEARCH_CACHE_SIZE
#define PKCS11_SEARCH_CACHE_SIZE        @PKCS11_SEARCH_CACHE_SIZE@
#endif

/** Support for configuring a "blank" or new device */
#ifndef PKCS11_TOKEN_INIT_SUPPORT
#cmakedefine01 PKCS11_TOKEN_INIT_SUPPORT
#endif

/** Include the monotonic hardware feature as an object */
#ifndef PKCS11_MONOTONIC_ENABLE
#cmakedefine01 PKCS11_MONOTONIC_ENABLE
#endif

/** Automatically generate CKA_ID values based on standards */
#ifndef PKCS11_AUTO_ID_ENABLE
#cmakedefine01 PKCS11_AUTO_ID_ENABLE
#endif

#include "pkcs11/cryptoki.h"
#include <stddef.h>
typedef struct pkcs11_slot_ctx_s *pkcs11_slot_ctx_ptr;
typedef struct pkcs11_lib_ctx_s  *pkcs11_lib_ctx_ptr;
typedef struct pkcs11_object_s   *pkcs11_object_ptr;

#define MAX_CONF_FILE_NAME_SIZE			15
#define MAX_CONF_FILES              	(PKCS11_MAX_SLOTS_ALLOWED * PKCS11_MAX_OBJECTS_ALLOWED)

#if PKCS11_USE_STATIC_CONFIG
CK_RV pkcs11_config_interface(pkcs11_slot_ctx_ptr pSlot);
#endif
void pkcs11_config_split_string(char* s, char splitter, int * argc, char* argv[]);
CK_RV pkcs11_config_load_objects(pkcs11_slot_ctx_ptr slot_ctx);
CK_RV pkcs11_config_load(pkcs11_slot_ctx_ptr slot_ctx);
CK_RV pkcs11_config_cert(pkcs11_lib_ctx_ptr pLibCtx, pkcs11_slot_ctx_ptr pSlot, pkcs11_object_ptr pObject, CK_ATTRIBUTE_PTR pLabel);
CK_RV pkcs11_config_key(pkcs11_lib_ctx_ptr pLibCtx, pkcs11_slot_ctx_ptr pSlot, pkcs11_object_ptr pObject, CK_ATTRIBUTE_PTR pLabel);
#if !PKCS11_USE_STATIC_CONFIG
CK_RV pkcs11_config_remove_object(pkcs11_lib_ctx_ptr pLibCtx, pkcs11_slot_ctx_ptr pSlot, pkcs11_object_ptr pObject);
#endif

void pkcs11_config_init_private(pkcs11_object_ptr pObject, const char * label, size_t len);
void pkcs11_config_init_public(pkcs11_object_ptr pObject, const char * label, size_t len);
void pkcs11_config_init_cert(pkcs11_object_ptr pObject, const char * label, size_t len);
void pkcs11_config_init_secret(pkcs11_object_ptr pObject, const char* label, size_t len, size_t keylen);

#endif /* PKCS11_CONFIG_H_ */
